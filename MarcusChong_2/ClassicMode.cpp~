#include <iostream>
#include <string>
#include <fstream>
#include <limits>
#include <math.h>
#include <stdlib.h>
#include <cstdlib>
#include "Game.h"

using namespace std;

//CONSTRUCTOR
ClassicMode::ClassicMode(){
	
	int x, y, xLine, yLine;
	int newX, newY;
	char c;
	double density;

	ifstream readFile;
	string inFile = " ";	
	string line = " ";

	char ** grid;
	char ** newGrid;

}

//DESTRUCTOR
ClassicMode::~ClassicMode(){

	for(int y = 0; y < yLine; ++y)
    	delete [] grid[y];
  	delete [] grid;

  	for(int newY = 0; newY < yLine; ++newY)
    	delete [] newGrid[newY];
  	delete [] newGrid;	
}

double ClassicMode::rand_0_1(void)
{
    return (double)rand()/RAND_MAX;
}

char ClassicMode::randChar(double a){

	double randNum = rand_0_1();

	if(randNum > a)
		c = 'X';
	else if(randNum <= a)
		c = '-';

return c;	
}

int ClassicMode::newCell(){

	int sum, cell;

	switch(sum){
		case (1):
			cell = 0;
		case (2):
		//	cell = oldGrid[newXLine][newYLine];
		case (3):
			cell = 1;
		case (4):
			cell = 0;
	}

return 0;
}

void ClassicMode::readInfile(string textfile){

	readFile.open(textfile.c_str());
	readFile>> yLine;
	readFile >> xLine;

	for(y = 0; y < yLine; ++y){
		readFile >> line;
		for(x = 0; x < xLine; ++x){

			grid[x][y] = line[x];
			cout << grid[x][y];
		}
		cout << endl;
	}
	readFile.close(); 
}

bool ClassicMode::isPopulated(int a, int b){

	if (grid[a][b] == 'X'){
		cout << "true\n";
		return true;}
	else {
		cout << "false\n";
		return false;}
}	

int ClassicMode::randClassic(){


	cout << "Enter an numeric value for the horizontal line: \n";
	cin >>  xLine;
	cout << "Enter an numeric value for the vertical line: \n";
	cin >>  yLine;
	cout << "Enter a decimal for the density: \n";
	cin >> density;

	grid = new char*[xLine];
	newGrid = new char*[xLine];

	for(x = 0; x < xLine; ++x){
		grid[x] = new char[yLine];
		newGrid[x] = new char[yLine];
	}	

	for (int y = 0; y < yLine; y++){ 
		for (int x = 0; x < xLine; x++) { 

			grid[x][y] = randChar(density);
			cout << grid[x][y]; 
		} 
	cout << endl; 
	}

	do{
		cout << "Would you like to view the next generation? [Y/N] \n";
		cin >> choice;

		if (choice == 'Y')
			break;
		else if( choice == 'N')
			break;

	}while(choice != 'Y' || choice != 'N' );

return 0;
}

// ACCESS FROM ClassicMode::classic
int ClassicMode::fileClassic(){

	cout << "Enter .txt file: \n";
	cin >> inFile;
	std::ifstream infile(inFile);

	readFile.open(inFile.c_str());
	readFile >> yLine;
	readFile >> xLine;
	readFile.close();  

	grid = new char*[xLine];
	newGrid = new char*[xLine];

	for(x = 0; x < xLine; ++x){
		grid[x] = new char[yLine];
		newGrid[x] = new char[yLine];
	}	

	readInfile(inFile);


return 0;
}

// ACCESSED FROM MAIN
int ClassicMode::classic(){

	int choice;

	cout << "\nOPTIONS: \n1. Input .txt file\n2. Randomized map\n\n";
	cin >> choice;
	switch (choice){
		case (1):
			fileClassic();
			break;
		case (2):
			randClassic();
			break;
	}

return 0;
}




